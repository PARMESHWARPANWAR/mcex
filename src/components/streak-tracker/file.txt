

// next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// types/index.ts

// models/Task.ts

// lib/mongodb.ts

// lib/taskHelpers.ts
import { ITask } from '@/types';

export const isCompletedToday = (task: ITask): boolean => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  return task.completedDates?.some(date => {
    const completedDate = new Date(date);
    completedDate.setHours(0, 0, 0, 0);
    return completedDate.getTime() === today.getTime();
  }) || false;
};

export const formatDate = (date: Date | null): string => {
  if (!date) return 'Never';
  return new Date(date).toLocaleDateString();
};

export const calculateStreakData = (completedDates: Date[], lastCompletionDate: Date | null) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);

  let streakCurrent = 0;

  if (!lastCompletionDate) {
    // First completion
    streakCurrent = 1;
  } else {
    const lastCompleted = new Date(lastCompletionDate);
    lastCompleted.setHours(0, 0, 0, 0);
    
    if (lastCompleted.getTime() === yesterday.getTime()) {
      // Consecutive day - streak continues
      const sortedDates = completedDates
        .map(date => new Date(date))
        .sort((a, b) => b.getTime() - a.getTime());
      
      streakCurrent = calculateCurrentStreak(sortedDates, today);
    } else {
      // Streak broken, restart
      streakCurrent = 1;
    }
  }

  return { streakCurrent };
};

const calculateCurrentStreak = (sortedDates: Date[], today: Date): number => {
  let streak = 1; // Including today
  let currentDate = new Date(today);
  currentDate.setDate(currentDate.getDate() - 1); // Start from yesterday
  
  for (let i = 0; i < sortedDates.length - 1; i++) {
    const date = new Date(sortedDates[i]);
    date.setHours(0, 0, 0, 0);
    
    if (date.getTime() === currentDate.getTime()) {
      streak++;
      currentDate.setDate(currentDate.getDate() - 1);
    } else {
      break;
    }
  }
  
  return streak;
};

// app/api/tasks/[id]/route.ts

// app/api/tasks/[id]/complete/route.ts

// components/TaskCard.tsx

// components/AddTaskForm.tsx

// components/LoadingSpinner.tsx

// components/ErrorMessage.tsx
'use client';

import React from 'react';

interface ErrorMessageProps {
  error: string;
  onRetry: () => void;
}

const ErrorMessage: React.FC<ErrorMessageProps> = ({ error, onRetry }) => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center">
      <div className="text-center bg-white/80 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-white/20 max-w-md mx-4">
        <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h3 className="text-xl font-bold text-gray-800 mb-2">Something went wrong</h3>
        <p className="text-red-600 mb-6">{error}</p>
        <button
          onClick={onRetry}
          className="bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition